import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { Room, Hotel } from "@shared/schema";
import AdminSidebar from "@/components/admin/admin-sidebar";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardFooter,
  CardDescription,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";
import { 
  Loader2, Plus, Pencil, Trash2, Building, Users, Home,
  Search, Filter, ArrowUp, ArrowDown, BedDouble
} from "lucide-react";

export default function RoomManagement() {
  const { toast } = useToast();
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [roomToDelete, setRoomToDelete] = useState<Room | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterHotelId, setFilterHotelId] = useState<number | null>(null);

  // Fetch rooms and hotels
  const { data: rooms = [], isLoading: isLoadingRooms } = useQuery<Room[]>({
    queryKey: ['/api/rooms'],
  });

  const { data: hotels = [], isLoading: isLoadingHotels } = useQuery<Hotel[]>({
    queryKey: ['/api/hotels'],
  });

  const isLoading = isLoadingRooms || isLoadingHotels;

  // Gruplandırma işlemi - odaları otellerine göre grupla
  const groupedRooms = rooms.reduce((acc, room) => {
    const hotelId = room.hotelId;
    if (!acc[hotelId]) {
      acc[hotelId] = [];
    }
    acc[hotelId].push(room);
    return acc;
  }, {} as Record<number, Room[]>);

  // Filtreleme işlemi
  const filteredHotelIds = Object.keys(groupedRooms)
    .map(Number)
    .filter(hotelId => {
      // Otel filtresi varsa sadece o oteli göster
      if (filterHotelId !== null) {
        return hotelId === filterHotelId;
      }
      
      // Arama filtresi varsa, otelin odalarından herhangi biri eşleşiyorsa oteli göster
      if (searchQuery) {
        return groupedRooms[hotelId].some(room => 
          room.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          room.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
          room.type.toLowerCase().includes(searchQuery.toLowerCase())
        );
      }
      
      // Filtre yoksa tüm otelleri göster
      return true;
    });

  // Delete room mutation
  const deleteRoomMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest("DELETE", `/api/rooms/${id}`);
      return id;
    },
    onSuccess: () => {
      toast({
        title: "Oda silindi",
        description: "Oda başarıyla silindi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      setDeleteDialogOpen(false);
      setRoomToDelete(null);
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: `Oda silinirken bir hata oluştu: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const handleDelete = () => {
    if (roomToDelete) {
      deleteRoomMutation.mutate(roomToDelete.id);
    }
  };

  const openDeleteDialog = (room: Room) => {
    setRoomToDelete(room);
    setDeleteDialogOpen(true);
  };

  const getHotelNameById = (hotelId: number) => {
    const hotel = hotels.find(h => h.id === hotelId);
    return hotel ? hotel.name : "Bilinmeyen Otel";
  };

  const getHotelImageById = (hotelId: number) => {
    const hotel = hotels.find(h => h.id === hotelId);
    return hotel?.imageUrl || "https://via.placeholder.com/400x200?text=Otel";
  };

  // Aynı tipteki odaları bir araya getir
  const groupRoomsByType = (rooms: Room[]) => {
    return rooms.reduce((acc, room) => {
      const type = room.type;
      if (!acc[type]) {
        acc[type] = [];
      }
      acc[type].push(room);
      return acc;
    }, {} as Record<string, Room[]>);
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900 flex">
      <AdminSidebar />

      <main className="flex-1 p-6 overflow-auto">
        <div className="max-w-6xl mx-auto">
          <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-6">
            <h1 className="text-3xl font-bold font-heading text-neutral-800 dark:text-white">Oda Yönetimi</h1>
            
            <div className="flex flex-col sm:flex-row gap-3">
              <div className="relative flex-1 min-w-[200px]">
                <Input
                  placeholder="Oda adı, tipi veya özelliklerini ara..."
                  className="pl-9"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-neutral-500" />
              </div>
              
              <Select
                value={filterHotelId ? filterHotelId.toString() : "all"}
                onValueChange={(value) => 
                  setFilterHotelId(value === "all" ? null : parseInt(value))
                }
              >
                <SelectTrigger className="w-[200px]">
                  <SelectValue placeholder="Tüm Oteller" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Tüm Oteller</SelectItem>
                  {hotels.map((hotel) => (
                    <SelectItem key={hotel.id} value={hotel.id.toString()}>
                      {hotel.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              
              <Button onClick={() => window.location.href = "/admin/rooms/add"}>
                <Plus className="mr-2 h-4 w-4" />
                Yeni Oda Ekle
              </Button>
            </div>
          </div>

          {isLoading ? (
            <div className="flex items-center justify-center py-20">
              <Loader2 className="h-10 w-10 animate-spin text-primary" />
            </div>
          ) : filteredHotelIds.length === 0 ? (
            <Card className="border border-dashed">
              <CardContent className="flex flex-col items-center justify-center py-16 text-center">
                <div className="bg-neutral-100 dark:bg-neutral-800 rounded-full p-4 mb-4">
                  <BedDouble className="h-10 w-10 text-neutral-500" />
                </div>
                <h3 className="text-lg font-semibold mb-2">Henüz Oda Bulunmuyor</h3>
                <p className="text-neutral-500 max-w-md mb-6">
                  {searchQuery || filterHotelId 
                    ? "Aramanızla eşleşen sonuç bulunamadı. Lütfen farklı bir arama terimi deneyin veya filtrelerinizi temizleyin."
                    : "Henüz sisteme eklenmiş oda bulunmuyor. 'Yeni Oda Ekle' butonuna tıklayarak oda ekleyebilirsiniz."}
                </p>
                <div className="flex gap-3">
                  {(searchQuery || filterHotelId) && (
                    <Button variant="outline" onClick={() => {
                      setSearchQuery('');
                      setFilterHotelId(null);
                    }}>
                      Filtreleri Temizle
                    </Button>
                  )}
                  <Button onClick={() => window.location.href = "/admin/rooms/add"}>
                    <Plus className="mr-2 h-4 w-4" />
                    Yeni Oda Ekle
                  </Button>
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-8">
              {filteredHotelIds.map(hotelId => {
                const hotel = hotels.find(h => h.id === hotelId);
                const hotelRooms = groupedRooms[hotelId];
                // Oda tipine göre grupla
                const roomsByType = groupRoomsByType(hotelRooms);
                
                return (
                  <Card key={hotelId} className="overflow-hidden border-[#2094f3]/50">
                    <CardHeader className="bg-gradient-to-r from-[#2094f3]/10 to-transparent">
                      <div className="flex items-center">
                        <Building className="h-5 w-5 mr-2 text-[#2094f3]" />
                        <CardTitle>{getHotelNameById(hotelId)}</CardTitle>
                      </div>
                      <CardDescription>
                        Toplam {hotelRooms.length} oda - {Object.keys(roomsByType).length} farklı oda tipi
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="grid gap-4 pt-6">
                      {Object.entries(roomsByType).map(([type, rooms]) => (
                        <div key={type} className="border rounded-lg overflow-hidden">
                          <div className="bg-neutral-100 dark:bg-neutral-800 px-4 py-2 font-medium flex justify-between items-center">
                            <div className="flex items-center">
                              <BedDouble className="h-4 w-4 mr-2 text-neutral-500" />
                              <span>{type}</span>
                              <Badge variant="outline" className="ml-2">
                                {rooms.length} oda
                              </Badge>
                            </div>
                          </div>
                          <div className="p-3 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                            {rooms.map(room => (
                              <div key={room.id} className="border rounded-md overflow-hidden bg-white dark:bg-neutral-950 hover:shadow-md transition-shadow">
                                <div className="flex items-start h-full">
                                  <div className="w-24 h-24 shrink-0">
                                    <img
                                      src={room.imageUrl || "https://via.placeholder.com/150x150?text=Oda"}
                                      alt={room.name}
                                      className="w-full h-full object-cover"
                                    />
                                  </div>
                                  <div className="flex-1 p-3 flex flex-col justify-between h-full">
                                    <div>
                                      <h3 className="font-medium text-base">{room.name}</h3>
                                      <div className="flex items-center text-sm text-neutral-500 mt-1">
                                        <Users className="h-3.5 w-3.5 mr-1" />
                                        <span>{room.capacity} Kişilik</span>
                                      </div>
                                    </div>
                                    <div className="flex justify-end mt-2 space-x-2">
                                      <Button
                                        variant="outline"
                                        size="sm"
                                        className="h-8 border-[#2094f3] text-[#2094f3] hover:bg-[#2094f3]/10"
                                        onClick={() => window.location.href = `/admin/rooms/edit/${room.id}`}
                                      >
                                        <Pencil className="h-3.5 w-3.5 mr-1" />
                                        Düzenle
                                      </Button>
                                      <Button
                                        variant="outline"
                                        size="sm"
                                        className="h-8 border-red-500 text-red-500 hover:bg-red-50 dark:hover:bg-red-950"
                                        onClick={() => openDeleteDialog(room)}
                                      >
                                        <Trash2 className="h-3.5 w-3.5 mr-1" />
                                        Sil
                                      </Button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ))}
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}

          <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Odayı Sil</AlertDialogTitle>
                <AlertDialogDescription>
                  Bu odayı silmek istediğinize emin misiniz? Bu işlem geri alınamaz.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>İptal</AlertDialogCancel>
                <AlertDialogAction
                  className="bg-red-600 hover:bg-red-700"
                  onClick={handleDelete}
                  disabled={deleteRoomMutation.isPending}
                >
                  {deleteRoomMutation.isPending && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Odayı Sil
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </div>
      </main>
    </div>
  );
}
