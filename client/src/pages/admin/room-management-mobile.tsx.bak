import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { Room, Hotel, insertRoomSchema } from "@shared/schema";
import { useDeviceType } from "@/hooks/use-mobile";
import { Button } from "@/components/ui/button";
import { Link } from "wouter";
import {
  Card,
  CardContent,
} from "@/components/ui/card";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { Loader2, Plus, Pencil, Trash2, Building, Users, CreditCard, ArrowLeft, Check, ChevronRight, Home, Search, Filter, BedDouble, Tag } from "lucide-react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { motion } from "framer-motion";
import * as z from "zod";

// Define available room features
const availableFeatures = [
  { id: "kingYatak", label: "King Yatak" },
  { id: "wifi", label: "Ücretsiz Wi-Fi" },
  { id: "tv", label: "Akıllı TV" },
  { id: "klima", label: "Klima" },
  { id: "banyo", label: "Özel Banyo" },
  { id: "minibar", label: "Mini Bar" },
  { id: "denizManzara", label: "Deniz Manzarası" },
  { id: "jakuzi", label: "Jakuzi" },
  { id: "oturmaAlani", label: "Oturma Alanı" },
  { id: "teras", label: "Özel Teras" },
  { id: "ikiYatakOdasi", label: "2 Yatak Odası" },
  { id: "ikiBanyo", label: "2 Banyo" },
];

// Define room types
const roomTypes = [
  { id: "standart", label: "Standart Oda" },
  { id: "deluxe", label: "Deluxe Oda" },
  { id: "suit", label: "Suit Oda" },
  { id: "aile", label: "Aile Odası" },
];

// Extended schema for form validation
const roomFormSchema = insertRoomSchema.extend({
  features: z.array(z.string()).min(1, {
    message: "En az bir özellik seçmelisiniz",
  }),
  hotelId: z.coerce.number(),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

export default function RoomManagementMobile() {
  const { toast } = useToast();
  const [isAddSheetOpen, setIsAddSheetOpen] = useState(false);
  const [isEditSheetOpen, setIsEditSheetOpen] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState<Room | null>(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [roomToDelete, setRoomToDelete] = useState<Room | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterHotelId, setFilterHotelId] = useState<number | null>(null);

  // Fetch rooms and hotels
  const { data: rooms = [], isLoading: isLoadingRooms } = useQuery<Room[]>({
    queryKey: ['/api/rooms'],
  });

  const { data: hotels = [], isLoading: isLoadingHotels } = useQuery<Hotel[]>({
    queryKey: ['/api/hotels'],
  });

  const isLoading = isLoadingRooms || isLoadingHotels;

  const filteredRooms = rooms.filter(room => {
    const matchesSearch = searchQuery === '' || 
      room.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      room.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesHotel = filterHotelId === null || room.hotelId === filterHotelId;
    
    return matchesSearch && matchesHotel;
  });

  // Form for adding a new room
  const addForm = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      hotelId: 0,
      name: "",
      description: "",
      price: 0,
      capacity: 2,
      imageUrl: "",
      features: [],
      type: "",
    },
  });

  // Form for editing a room
  const editForm = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      hotelId: 0,
      name: "",
      description: "",
      price: 0,
      capacity: 2,
      imageUrl: "",
      features: [],
      type: "",
    },
  });

  // Create room mutation
  const createRoomMutation = useMutation({
    mutationFn: async (data: RoomFormValues) => {
      const res = await apiRequest("POST", "/api/rooms", data);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Oda eklendi",
        description: "Yeni oda başarıyla eklendi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      setIsAddSheetOpen(false);
      addForm.reset();
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: `Oda eklenirken bir hata oluştu: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Update room mutation
  const updateRoomMutation = useMutation({
    mutationFn: async (data: RoomFormValues & { id: number }) => {
      const { id, ...roomData } = data;
      const res = await apiRequest("PUT", `/api/rooms/${id}`, roomData);
      return await res.json();
    },
    onSuccess: () => {
      toast({
        title: "Oda güncellendi",
        description: "Oda bilgileri başarıyla güncellendi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      setIsEditSheetOpen(false);
      setSelectedRoom(null);
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: `Oda güncellenirken bir hata oluştu: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Delete room mutation
  const deleteRoomMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest("DELETE", `/api/rooms/${id}`);
      return id;
    },
    onSuccess: () => {
      toast({
        title: "Oda silindi",
        description: "Oda başarıyla silindi.",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      setDeleteDialogOpen(false);
      setRoomToDelete(null);
    },
    onError: (error) => {
      toast({
        title: "Hata",
        description: `Oda silinirken bir hata oluştu: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const handleAddSubmit = (data: RoomFormValues) => {
    createRoomMutation.mutate(data);
  };

  const handleEditSubmit = (data: RoomFormValues) => {
    if (selectedRoom) {
      updateRoomMutation.mutate({ ...data, id: selectedRoom.id });
    }
  };

  const handleDelete = () => {
    if (roomToDelete) {
      deleteRoomMutation.mutate(roomToDelete.id);
    }
  };

  const openEditSheet = (room: Room) => {
    // Tam sayfa düzenleme için yönlendir
    window.location.href = `/admin/rooms/edit/${room.id}`;
  };

  const openDeleteDialog = (room: Room) => {
    setRoomToDelete(room);
    setDeleteDialogOpen(true);
  };

  const getHotelNameById = (hotelId: number) => {
    const hotel = hotels.find(h => h.id === hotelId);
    return hotel ? hotel.name : "Bilinmeyen Otel";
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      {/* iOS/Android style mobile header and content */}
      <div className="sticky top-0 z-10">
        <div className="bg-gradient-to-r from-[#2094f3] to-[#38b6ff] text-white shadow-md">
          <div className="flex items-center px-4 h-14">
            <Button variant="ghost" size="icon" className="text-white" asChild>
              <Link href="/admin">
                <ArrowLeft className="h-5 w-5" />
              </Link>
            </Button>
            <h1 className="flex-1 text-center font-semibold text-lg">Oda Yönetimi</h1>
            <Button variant="ghost" size="icon" className="text-white" asChild>
              <Link href="/admin/rooms/add">
                <Plus className="h-5 w-5" />
              </Link>
            </Button>
            
            {/* Eski form - artık kullanılmıyor, yönlendirme için bırakıldı */}
            <Sheet open={isAddSheetOpen} onOpenChange={setIsAddSheetOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="hidden">
                  <Plus className="h-5 w-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="bottom" className="h-[85vh] rounded-t-[20px] pb-8">
                <SheetHeader className="text-left pb-4">
                  <SheetTitle className="text-xl font-semibold">Yeni Oda Ekle</SheetTitle>
                  <SheetDescription>
                    Yeni bir oda eklemek için formu doldurun
                  </SheetDescription>
                </SheetHeader>
                <ScrollArea className="h-[calc(85vh-10rem)]">
                  <Form {...addForm}>
                    <form onSubmit={addForm.handleSubmit(handleAddSubmit)} className="space-y-4">
                      <FormField
                        control={addForm.control}
                        name="hotelId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Otel</FormLabel>
                            <Select
                              onValueChange={(value) => field.onChange(parseInt(value))}
                              defaultValue={field.value ? field.value.toString() : undefined}
                            >
                              <FormControl>
                                <SelectTrigger className="h-12 bg-white/5">
                                  <SelectValue placeholder="Otel seçin" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {hotels.map((hotel) => (
                                  <SelectItem key={hotel.id} value={hotel.id.toString()}>
                                    {hotel.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={addForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Oda Adı</FormLabel>
                            <FormControl>
                              <Input placeholder="Standart Oda" className="h-12 bg-white/5" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={addForm.control}
                          name="price"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Fiyat (₺)</FormLabel>
                              <FormControl>
                                <Input
                                  type="number"
                                  min="0"
                                  placeholder="1450"
                                  className="h-12 bg-white/5"
                                  {...field}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={addForm.control}
                          name="capacity"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Kapasite</FormLabel>
                              <Select
                                onValueChange={(value) => field.onChange(parseInt(value))}
                                defaultValue={field.value.toString()}
                              >
                                <FormControl>
                                  <SelectTrigger className="h-12 bg-white/5">
                                    <SelectValue placeholder="Kapasite" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="1">1 Kişilik</SelectItem>
                                  <SelectItem value="2">2 Kişilik</SelectItem>
                                  <SelectItem value="3">3 Kişilik</SelectItem>
                                  <SelectItem value="4">4 Kişilik</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      <FormField
                        control={addForm.control}
                        name="type"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Oda Tipi</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              defaultValue={field.value}
                            >
                              <FormControl>
                                <SelectTrigger className="h-12 bg-white/5">
                                  <SelectValue placeholder="Oda tipi seçin" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {roomTypes.map((type) => (
                                  <SelectItem key={type.id} value={type.label}>
                                    {type.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={addForm.control}
                        name="imageUrl"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Görsel URL</FormLabel>
                            <FormControl>
                              <Input 
                                placeholder="https://example.com/image.jpg" 
                                className="h-12 bg-white/5"
                                {...field} 
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={addForm.control}
                        name="description"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Açıklama</FormLabel>
                            <FormControl>
                              <Textarea
                                placeholder="Oda hakkında detaylı bilgi..."
                                rows={3}
                                className="bg-white/5"
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={addForm.control}
                        name="features"
                        render={() => (
                          <FormItem>
                            <FormLabel>Özellikler</FormLabel>
                            <div className="grid grid-cols-2 gap-2 mt-2">
                              {availableFeatures.slice(0, 8).map((feature) => (
                                <FormField
                                  key={feature.id}
                                  control={addForm.control}
                                  name="features"
                                  render={({ field }) => (
                                    <FormItem
                                      key={feature.id}
                                      className="flex flex-row items-center space-x-2 space-y-0 bg-white/5 p-2 rounded-md"
                                    >
                                      <FormControl>
                                        <Checkbox
                                          className="h-5 w-5"
                                          checked={field.value?.includes(feature.label)}
                                          onCheckedChange={(checked) => {
                                            return checked
                                              ? field.onChange([...field.value, feature.label])
                                              : field.onChange(
                                                  field.value?.filter(
                                                    (value) => value !== feature.label
                                                  )
                                                );
                                          }}
                                        />
                                      </FormControl>
                                      <FormLabel className="text-sm cursor-pointer">
                                        {feature.label}
                                      </FormLabel>
                                    </FormItem>
                                  )}
                                />
                              ))}
                            </div>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <Button 
                        type="submit" 
                        className="w-full h-12 bg-[#2094f3] text-white mt-6"
                        disabled={createRoomMutation.isPending}
                      >
                        {createRoomMutation.isPending && (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        )}
                        Odayı Kaydet
                      </Button>
                    </form>
                  </Form>
                </ScrollArea>
              </SheetContent>
            </Sheet>
          </div>
        </div>
        
        {/* Arama ve Filtreleme */}
        <div className="px-4 py-3 bg-white shadow-sm border-b flex items-center space-x-2">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-neutral-400" />
            <Input
              placeholder="Oda ara..."
              className="pl-9 h-10 bg-neutral-50 border-[#2094f3]/20"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <Select
            value={filterHotelId === null ? 'all' : filterHotelId.toString()}
            onValueChange={(value) => setFilterHotelId(value === 'all' ? null : parseInt(value))}
          >
            <SelectTrigger className="w-auto h-10 bg-neutral-50 border-[#2094f3]/20">
              <Filter className="h-4 w-4 mr-2 text-neutral-500" />
              <span className="sr-only">Filtrele</span>
            </SelectTrigger>
            <SelectContent align="end">
              <SelectItem value="all">Tüm Oteller</SelectItem>
              {hotels.map((hotel) => (
                <SelectItem key={hotel.id} value={hotel.id.toString()}>
                  {hotel.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>
      
      {/* Mobil iOS/Android stili oda listesi */}
      <div className="px-4 py-3">
        {isLoading ? (
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-[#2094f3]" />
          </div>
        ) : filteredRooms.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-12 text-center">
            <BedDouble className="h-12 w-12 text-neutral-300 mb-3" />
            <h3 className="text-lg font-medium text-neutral-600">Oda Bulunamadı</h3>
            <p className="text-sm text-neutral-500 mt-1">Arama kriterlerinizle eşleşen oda yok</p>
          </div>
        ) : (
          <motion.div 
            className="space-y-4 pb-16"
            initial="hidden"
            animate="visible"
            variants={{
              visible: { 
                transition: { 
                  staggerChildren: 0.05
                }
              }
            }}
          >
            {filteredRooms.map((room) => (
              <motion.div
                key={room.id}
                variants={{
                  hidden: { opacity: 0, y: 10 },
                  visible: { opacity: 1, y: 0, transition: { duration: 0.3 } }
                }}
              >
                <Card className="overflow-hidden border-[#2094f3]/20 bg-white rounded-xl shadow-sm">
                  <div className="flex">
                    <div className="w-1/3 min-w-[100px] relative">
                      <img
                        src={room.imageUrl || "https://via.placeholder.com/150x150?text=Oda"}
                        alt={room.name}
                        className="h-full w-full object-cover aspect-square"
                      />
                      <div className="absolute bottom-0 left-0 right-0 p-1 bg-gradient-to-t from-black/70 to-transparent">
                        <div className="flex items-center">
                          <Badge variant="outline" className="bg-white text-[#2094f3] border-0 text-xs">
                            {room.type}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    <CardContent className="flex-1 p-3">
                      <div className="flex justify-between items-start">
                        <div>
                          <p className="text-xs text-[#2094f3] font-medium">
                            {getHotelNameById(room.hotelId)}
                          </p>
                          <h3 className="font-semibold text-base line-clamp-1">{room.name}</h3>
                          <div className="flex items-center gap-1 mt-1">
                            <Badge variant="outline" className="bg-[#2094f3]/5 text-[#2094f3] border-[#2094f3]/20 text-xs px-1.5">
                              <Users className="h-3 w-3 mr-0.5" />
                              {room.capacity}
                            </Badge>
                            <Badge variant="outline" className="bg-[#2094f3]/5 text-[#2094f3] border-[#2094f3]/20 text-xs px-1.5">
                              <Tag className="h-3 w-3 mr-0.5" />
                              {room.price.toLocaleString()} ₺
                            </Badge>
                          </div>
                        </div>
                        <div className="flex flex-col gap-1.5">
                          <Button
                            size="icon"
                            variant="ghost"
                            className="h-8 w-8 text-blue-600 hover:text-blue-700 hover:bg-blue-50"
                            onClick={() => openEditSheet(room)}
                          >
                            <Pencil className="h-4 w-4" />
                          </Button>
                          <Button
                            size="icon"
                            variant="ghost"
                            className="h-8 w-8 text-red-600 hover:text-red-700 hover:bg-red-50"
                            onClick={() => openDeleteDialog(room)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </div>
                </Card>
              </motion.div>
            ))}
          </motion.div>
        )}
      </div>

      {/* Edit Sheet - Artık kullanılmıyor, tam sayfa yaklaşımına geçildi */}
      <Sheet open={false}>
        <SheetContent side="bottom" className="h-[85vh] rounded-t-[20px] pb-8">
          <SheetHeader className="text-left pb-4">
            <SheetTitle className="text-xl font-semibold">Bu form artık kullanılmıyor</SheetTitle>
            <SheetDescription>
              Tam sayfa düzenleme yaklaşımına geçildi
            </SheetDescription>
          </SheetHeader>
        </SheetContent>
      </Sheet>
      
      {/* Bu içerik tamamen kaldırıldı */}
                  <FormField
                    control={editForm.control}
                    name="hotelId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Otel</FormLabel>
                        <Select
                          onValueChange={(value) => field.onChange(parseInt(value))}
                          defaultValue={field.value ? field.value.toString() : undefined}
                          value={field.value.toString()}
                        >
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5">
                              <SelectValue placeholder="Otel seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {hotels.map((hotel) => (
                              <SelectItem key={hotel.id} value={hotel.id.toString()}>
                                {hotel.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={editForm.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Adı</FormLabel>
                        <FormControl>
                          <Input className="h-12 bg-white/5" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={editForm.control}
                      name="price"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Fiyat (₺)</FormLabel>
                          <FormControl>
                            <Input
                              type="number"
                              min="0"
                              className="h-12 bg-white/5"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={editForm.control}
                      name="capacity"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Kapasite</FormLabel>
                          <Select
                            onValueChange={(value) => field.onChange(parseInt(value))}
                            defaultValue={field.value.toString()}
                            value={field.value.toString()}
                          >
                            <FormControl>
                              <SelectTrigger className="h-12 bg-white/5">
                                <SelectValue placeholder="Kapasite" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="1">1 Kişilik</SelectItem>
                              <SelectItem value="2">2 Kişilik</SelectItem>
                              <SelectItem value="3">3 Kişilik</SelectItem>
                              <SelectItem value="4">4 Kişilik</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <FormField
                    control={editForm.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Tipi</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          value={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5">
                              <SelectValue placeholder="Oda tipi seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {roomTypes.map((type) => (
                              <SelectItem key={type.id} value={type.label}>
                                {type.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={editForm.control}
                    name="imageUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Görsel URL</FormLabel>
                        <FormControl>
                          <Input className="h-12 bg-white/5" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={editForm.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Açıklama</FormLabel>
                        <FormControl>
                          <Textarea
                            rows={3}
                            className="bg-white/5"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={editForm.control}
                    name="features"
                    render={() => (
                      <FormItem>
                        <FormLabel>Özellikler</FormLabel>
                        <div className="grid grid-cols-2 gap-2 mt-2">
                          {availableFeatures.slice(0, 8).map((feature) => (
                            <FormField
                              key={feature.id}
                              control={editForm.control}
                              name="features"
                              render={({ field }) => (
                                <FormItem
                                  key={feature.id}
                                  className="flex flex-row items-center space-x-2 space-y-0 bg-white/5 p-2 rounded-md"
                                >
                                  <FormControl>
                                    <Checkbox
                                      className="h-5 w-5"
                                      checked={field.value?.includes(feature.label)}
                                      onCheckedChange={(checked) => {
                                        return checked
                                          ? field.onChange([...field.value, feature.label])
                                          : field.onChange(
                                              field.value?.filter(
                                                (value) => value !== feature.label
                                              )
                                            );
                                      }}
                                    />
                                  </FormControl>
                                  <FormLabel className="text-sm cursor-pointer">
                                    {feature.label}
                                  </FormLabel>
                                </FormItem>
                              )}
                            />
                          ))}
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <Button 
                    type="submit" 
                    className="w-full h-12 bg-[#2094f3] text-white mt-6"
                    disabled={updateRoomMutation.isPending}
                  >
                    {updateRoomMutation.isPending && (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    Değişiklikleri Kaydet
                  </Button>
                </form>
              </Form>
            )}
          </ScrollArea>
        </SheetContent>
      </Sheet>

      {/* Delete Dialog */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent className="rounded-xl">
          <AlertDialogHeader>
            <AlertDialogTitle>Odayı Sil</AlertDialogTitle>
            <AlertDialogDescription>
              Bu odayı silmek istediğinize emin misiniz? Bu işlem geri alınamaz.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter className="gap-2 sm:gap-0">
            <AlertDialogCancel className="mt-0">İptal</AlertDialogCancel>
            <AlertDialogAction
              className="bg-red-600 hover:bg-red-700"
              onClick={handleDelete}
              disabled={deleteRoomMutation.isPending}
            >
              {deleteRoomMutation.isPending && (
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              )}
              Odayı Sil
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}