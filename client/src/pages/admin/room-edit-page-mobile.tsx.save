import { useState, useEffect } from "react";
import { useRoute, useLocation } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { Room, Hotel, insertRoomSchema } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Loader2, 
  ArrowLeft, 
  CalendarDays, 
  Calendar as CalendarIcon, 
  Clock,
  Save,
  Upload,
  Star,
  Trash
} from "lucide-react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import clsx from "clsx";

// Özellikler ve oda tipleri
const availableFeatures = [
  { id: "kingYatak", label: "King Yatak" },
  { id: "wifi", label: "Ücretsiz Wi-Fi" },
  { id: "tv", label: "Akıllı TV" },
  { id: "klima", label: "Klima" },
  { id: "banyo", label: "Özel Banyo" },
  { id: "minibar", label: "Mini Bar" },
  { id: "denizManzara", label: "Deniz Manzarası" },
  { id: "jakuzi", label: "Jakuzi" },
  { id: "oturmaAlani", label: "Oturma Alanı" },
  { id: "teras", label: "Özel Teras" },
  { id: "ikiYatakOdasi", label: "2 Yatak Odası" },
  { id: "ikiBanyo", label: "2 Banyo" },
];
const roomTypes = [
  { id: "standart", label: "Standart Oda" },
  { id: "deluxe", label: "Deluxe Oda" },
  { id: "suit", label: "Suit Oda" },
  { id: "aile", label: "Aile Odası" },
];
const weekdays = [
  { index: 0, name: "Pazar" },
  { index: 1, name: "Pazartesi" },
  { index: 2, name: "Salı" },
  { index: 3, name: "Çarşamba" },
  { index: 4, name: "Perşembe" },
  { index: 5, name: "Cuma" },
  { index: 6, name: "Cumartesi" },
];

const roomFormSchema = insertRoomSchema.extend({
  features: z.array(z.string()).min(1, { message: "En az bir özellik seçmelisiniz" }),
  hotelId: z.coerce.number(),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

export default function RoomEditPageMobile() {
  const [match, params] = useRoute("/admin/rooms/edit/:id");
  const [location, navigate] = useLocation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("details");
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedDatePrice, setSelectedDatePrice] = useState<number>(0);
  const [dailyPrices, setDailyPrices] = useState<Array<{date: Date, price: number}>>([]);
  const [selectedWeekday, setSelectedWeekday] = useState<number>(0);
  const [selectedWeekdayPrice, setSelectedWeekdayPrice] = useState<number>(0);
  const [weekdayPrices, setWeekdayPrices] = useState<Array<{dayIndex: number, price: number}>>([]);
  const today = new Date();
  const tomorrow = new Date(today); tomorrow.setDate(tomorrow.getDate() + 1);
  const [dateRange, setDateRange] = useState<{startDate: Date, endDate: Date}>({ startDate: today, endDate: tomorrow });
  const [openSingleDatePicker, setOpenSingleDatePicker] = useState(false);
  const [openRangeDatePicker, setOpenRangeDatePicker] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [images, setImages] = useState<Array<{url: string, filename: string, isMain: boolean}>>([]);
  type CalendarMode = 'single' | 'range' | 'weekday';
  const [calendarMode, setCalendarMode] = useState<CalendarMode>('single');
  const [rangePriceValue, setRangePriceValue] = useState<number>(0);
  const roomId = params?.id ? parseInt(params.id) : 0;

  // Oda ve otel verilerini çek
  const { data: room, isLoading: isLoadingRoom } = useQuery<Room>({
    queryKey: ['/api/rooms', roomId],
    queryFn: async () => {
      const response = await apiRequest("GET", `/api/rooms/${roomId}`);
      const json = await response.json();
      if (!json || Object.keys(json).length === 0) return null;
      if (json.data) return json.data;
      return json;
    },
    enabled: !!roomId,
  });
  const { data: hotels = [], isLoading: isLoadingHotels } = useQuery<Hotel[]>({ queryKey: ['/api/hotels'] });
  const isLoading = isLoadingRoom || isLoadingHotels;

  // Fiyat ve resim state'lerini başlat
  useEffect(() => {
    if (room && room.dailyPrices) {
      try {
        const parsedDailyPrices = JSON.parse(room.dailyPrices);
        setDailyPrices(parsedDailyPrices.map((item: any) => ({ date: new Date(item.date), price: item.price })));
      } catch {}
    }
    if (room && room.weekdayPrices) {
      try {
        setWeekdayPrices(JSON.parse(room.weekdayPrices));
      } catch {}
    }
    if (room && room.images) {
      try {
        const parsedImages = JSON.parse(room.images);
        if (parsedImages.length > 0 && !parsedImages.some((img: any) => img.isMain)) parsedImages[0].isMain = true;
        setImages(parsedImages);
      } catch {
        if (room.imageUrl) setImages([{ url: room.imageUrl, filename: 'main_image.jpg', isMain: true }]);
      }
    } else if (room && room.imageUrl) {
      setImages([{ url: room.imageUrl, filename: 'main_image.jpg', isMain: true }]);
    }
  }, [room]);

  // Formu başlat
  const form = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      name: "",
      description: "",
      hotelId: 1,
      imageUrl: "",
      capacity: 2,
      roomCount: 1,
      type: "standart",
      features: [],
    },
  });

  // Form değerlerini oda yüklenince doldur
  useEffect(() => {
    if (room) {
      form.reset({
        name: room.name,
        description: room.description,
        hotelId: room.hotelId,
        imageUrl: room.imageUrl,
        capacity: room.capacity,
        roomCount: room.roomCount,
        type: room.type,
        features: room.features,
      });
    }
  }, [room, form]);

  // Oda güncelleme mutasyonu
  const updateRoomMutation = useMutation({
    mutationFn: async (roomData: any) => {
      if (typeof roomData.dailyPrices === 'object') roomData.dailyPrices = JSON.stringify(roomData.dailyPrices);
      if (typeof roomData.weekdayPrices === 'object') roomData.weekdayPrices = JSON.stringify(roomData.weekdayPrices);
      if (!roomId) throw new Error("Oda ID bulunamadı");
      const imagesData = images.map(img => ({ url: img.url, filename: img.filename, isMain: img.isMain }));
      const mainImage = images.find(img => img.isMain);
      if (mainImage) roomData.imageUrl = mainImage.url;
      roomData.images = JSON.stringify(imagesData);
      const response = await apiRequest("PUT", `/api/rooms/${roomId}`, roomData);
      if (!response.ok) throw new Error(`Sunucu hatası (${response.status}): ${await response.text()}`);
      return await response.json();
    },
    onSuccess: () => {
      toast({ title: "Oda güncellendi", description: "Oda bilgileri başarıyla güncellendi." });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms', roomId] });
      navigate("/admin/rooms");
    },
    onError: (error: Error) => {
      toast({ title: "Hata", description: error.message, variant: "destructive" });
    },
  });

  // Form submit
  const onSubmit = (formData: RoomFormValues) => {
    if (!formData.hotelId) return toast({ title: "Validasyon Hatası", description: "Lütfen bir otel seçin", variant: "destructive" });
    if (!formData.name) return toast({ title: "Validasyon Hatası", description: "Lütfen oda adını girin", variant: "destructive" });
    let numericPrice = 0;
    const capacity = typeof formData.capacity === 'string' ? parseInt(formData.capacity) : formData.capacity;
    const roomCount = typeof formData.roomCount === 'string' ? parseInt(formData.roomCount) : formData.roomCount;
    const imagesData = images.map(img => ({ url: img.url, filename: img.filename, isMain: img.isMain }));
    const mainImage = images.find(img => img.isMain);
    if (mainImage) formData.imageUrl = mainImage.url;
    const updatedData = {
      ...formData,
      price: numericPrice,
      capacity: capacity,
      roomCount: roomCount,
      dailyPrices: JSON.stringify(dailyPrices),
      weekdayPrices: JSON.stringify(weekdayPrices),
      images: JSON.stringify(imagesData)
    };
    updateRoomMutation.mutate(updatedData);
  };

  // Fiyat işlemleri (ekle-sil)
  const handleAddDailyPrice = () => {
    if (!selectedDate || selectedDatePrice <= 0) return;
    const existingIndex = dailyPrices.findIndex(p => p.date.toDateString() === selectedDate.toDateString());
    if (existingIndex >= 0) {
      const updatedPrices = [...dailyPrices]; updatedPrices[existingIndex] = { date: selectedDate, price: selectedDatePrice };
      setDailyPrices(updatedPrices);
    } else {
      setDailyPrices([...dailyPrices, { date: selectedDate, price: selectedDatePrice }]);
    }
    toast({ title: "Fiyat eklendi", description: `${selectedDate.toLocaleDateString('tr-TR')} tarihi için fiyat: ${selectedDatePrice} ₺`, });
    setOpenSingleDatePicker(false);
  };
  const handleAddRangePrice = () => {
    if (!dateRange.startDate || !dateRange.endDate || rangePriceValue <= 0) return;
    const start = new Date(dateRange.startDate); const end = new Date(dateRange.endDate); const newPrices: Array<{date: Date, price: number}> = [];
    const currentDate = new Date(start);
    while (currentDate <= end) {
      newPrices.push({ date: new Date(currentDate), price: rangePriceValue });
      currentDate.setDate(currentDate.getDate() + 1);
    }
    const updatedPrices = [...dailyPrices];
    newPrices.forEach(newPrice => {
      const existingIndex = updatedPrices.findIndex(p => p.date.toDateString() === newPrice.date.toDateString());
      if (existingIndex >= 0) updatedPrices[existingIndex] = newPrice; else updatedPrices.push(newPrice);
    });
    setDailyPrices(updatedPrices);
    toast({ title: "Fiyatlar eklendi", description: `${start.toLocaleDateString('tr-TR')} - ${end.toLocaleDateString('tr-TR')} tarihleri için fiyat: ${rangePriceValue} ₺`, });
    setOpenRangeDatePicker(false);
  };
  const handleAddWeekdayPrice = () => {
    if (selectedWeekdayPrice <= 0) return;
    const existingIndex = weekdayPrices.findIndex(p => p.dayIndex === selectedWeekday);
    if (existingIndex >= 0) {
      const updatedPrices = [...weekdayPrices]; updatedPrices[existingIndex] = { dayIndex: selectedWeekday, price: selectedWeekdayPrice }; setWeekdayPrices(updatedPrices);
    } else {
      setWeekdayPrices([...weekdayPrices, { dayIndex: selectedWeekday, price: selectedWeekdayPrice }]);
    }
    toast({ title: "Gün fiyatı eklendi", description: `${weekdays.find(w => w.index === selectedWeekday)?.name} günleri için fiyat: ${selectedWeekdayPrice} ₺`, });
  };
  const isDayHighlighted = (date: Date) => dailyPrices.some(p => p.date.toDateString() === date.toDateString());
  const getPriceForDate = (date: Date) => {
    const priceObj = dailyPrices.find(p => p.date.toDateString() === date.toDateString());
    return priceObj ? priceObj.price : null;
  };
  const handleDeleteDailyPrice = (dateToDelete: Date) => {
    setDailyPrices(dailyPrices.filter(p => p.date.toDateString() !== dateToDelete.toDateString()));
    toast({ title: "Fiyat silindi", description: `${dateToDelete.toLocaleDateString('tr-TR')} tarihi için fiyat kaldırıldı.`, });
  };
  const handleDeleteWeekdayPrice = (dayIndex: number) => {
    setWeekdayPrices(weekdayPrices.filter(p => p.dayIndex !== dayIndex));
    toast({ title: "Gün fiyatı silindi", description: `${weekdays.find(w => w.index === dayIndex)?.name} günü için fiyat kaldırıldı.`, });
  };

  // Kontenjan uyarısı (odanın yanına eklenir)
  const KontenjanUyari = ({roomCount}:{roomCount:number}) => {
    if (roomCount === 0)
      return (
        <span className="ml-2 text-xs bg-red-500 text-white px-2 py-0.5 rounded-full animate-pulse font-semibold">
          Oda Tükendi!
        </span>
      );
    if (roomCount <= 5)
      return (
        <span className="ml-2 text-xs bg-yellow-500/90 text-white px-2 py-0.5 rounded-full animate-bounce font-semibold">
          Son {roomCount} Oda!
        </span>
      );
    return null;
  };

  // Eğer oda yoksa
  if (!isLoading && !room) {
    return (
      <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
        <div className="bg-gradient-to-r from-[#2094f3] to-[#38b6ff] text-white shadow-md">
          <div className="flex items-center px-4 h-14">
            <Button variant="ghost" size="icon" className="text-white" onClick={() => navigate("/admin/rooms")}>
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="flex-1 text-center font-semibold text-lg">Oda Bulunamadı</h1>
          </div>
        </div>
        <div className="p-4 flex flex-col items-center justify-center h-[80vh]">
          <p className="text-center text-neutral-500 mb-4">
            Düzenlemek istediğiniz oda bulunamadı.
          </p>
          <Button onClick={() => navigate("/admin/rooms")}>Oda Listesine Dön</Button>
        </div>
      </div>
    );
  }

  // Sayfa
  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="sticky top-0 z-10">
        <div className="bg-gradient-to-r from-[#2094f3] to-[#38b6ff] text-white shadow-md">
          <div className="flex items-center px-4 h-14">
            <Button variant="ghost" size="icon" className="text-white" onClick={() => navigate("/admin/rooms")}>
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="flex-1 text-center font-semibold text-lg">Odayı Düzenle</h1>
          </div>
        </div>
      </div>
      <div className="p-4 pb-32">
        {isLoading ? (
          <div className="flex justify-center items-center h-[60vh]">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <Tabs defaultValue="details" className="w-full" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-3 mb-6 bg-white rounded-2xl shadow">
                  <TabsTrigger value="details" className="rounded-xl">Detaylar</TabsTrigger>
                  <TabsTrigger value="features" className="rounded-xl">Özellikler</TabsTrigger>
                  <TabsTrigger value="pricing" className="rounded-xl">Fiyatlandırma</TabsTrigger>
                </TabsList>
                <TabsContent value="details" className="space-y-4">
                  <FormField
                    control={form.control}
                    name="hotelId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Otel</FormLabel>
                        <Select onValueChange={v => field.onChange(parseInt(v))} value={field.value ? field.value.toString() : undefined}>
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5 rounded-xl shadow" >
                              <SelectValue placeholder="Otel seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {hotels.map((hotel) => (
                              <SelectItem key={hotel.id} value={hotel.id.toString()}>
                                {hotel.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Adı</FormLabel>
                        <FormControl>
                          <Input className="h-12 bg-white/5 rounded-xl shadow-inner" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="capacity"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Kapasite</FormLabel>
                          <Select onValueChange={v => field.onChange(Number(v))} value={field.value?.toString()}>
                            <FormControl>
                              <SelectTrigger className="h-12 bg-white/5 rounded-xl shadow-inner">
                                <SelectValue placeholder="Kapasite" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {[1,2,3,4,5,6].map((v) => <SelectItem key={v} value={v.toString()}>{v} Kişilik</SelectItem>)}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="roomCount"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>oda sayısı
                            {field.value !== undefined &&
                              <KontenjanUyari roomCount={Number(field.value) || 0} />
                            }
                          </FormLabel>
                          <FormControl>
                            <Input
                              className="h-12 bg-white/5 rounded-xl shadow-inner"
                              type="number"
                              min="0"
                              value={field.value ?? ''}
                              onChange={e => field.onChange(Number(e.target.value))}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Tipi</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value || ''}>
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5 rounded-xl shadow">
                              <SelectValue placeholder="Oda tipi seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {roomTypes.map((type) => (
                              <SelectItem key={type.id} value={type.id}>
                                {type.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {/* Resim alanı */}
                  <FormField
                    control={form.control}
                    name="imageUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Resimleri</FormLabel>
                        <div className="space-y-2">
                          <label className="flex flex-col items-center justify-center border-2 border-dashed border-blue-300 rounded-xl p-3 h-32 cursor-pointer bg-white hover:bg-blue-50 shadow-inner transition">
                            <div className="flex flex-col items-center gap-1">
                              <Upload className="h-6 w-6 text-blue-400" />
                              <span className="text-sm text-blue-700">Resim Yükle</span>
                            </div>
                            <input 
                              type="file" 
                              accept="image/*" 
                              multiple
                              className="hidden"
                              onChange={async (e) => {
                                const files = e.target.files;
                                if (!files || files.length === 0) return;
                                setIsUploading(true);
                                const uploadedImages: Array<{url: string, filename: string, isMain: boolean}> = [];
                                for (let i = 0; i < files.length; i++) {
                                  const singleFileForm = new FormData();
                                  singleFileForm.append('image', files[i]);
                                  try {
                                    const response = await fetch('/api/upload', {
                                      method: 'POST', body: singleFileForm, credentials: 'include'
                                    });
                                    if (!response.ok) continue;
                                    const result = await response.json();
                                    if (result && result.file && result.file.url) {
                                      uploadedImages.push({ url: result.file.url, filename: result.file.filename, isMain: false });
                                    }
                                  } catch {}
                                }
                                if (uploadedImages.length > 0) {
                                  if (images.length === 0) {
                                    uploadedImages[0].isMain = true;
                                    field.onChange(uploadedImages[0].url);
                                    form.setValue('imageUrl', uploadedImages[0].url);
                                  }
                                  setImages(prev => [...prev, ...uploadedImages]);
                                  toast({ title: "Resimler yüklendi", description: `${uploadedImages.length} resim başarıyla yüklendi`, });
                                }
                                setIsUploading(false);
                              }}
                            />
                          </label>
                          {images.length > 0 && (
                            <div className="grid grid-cols-3 gap-2 mt-2">
                              {images.map((image, idx) => (
                                <div key={idx} className={clsx("relative rounded-2xl overflow-hidden border-2 shadow-md bg-white", image.isMain ? 'border-blue-500' : 'border-gray-300')}>
                                  <img src={image.url} alt={`Oda görseli ${idx + 1}`} className="w-full h-24 object-cover" />
                                  <div className="absolute top-1 right-1 flex gap-1">
                                    {!image.isMain && (
                                      <Button
                                        type="button"
                                        variant="outline"
                                        size="icon"
                                        className="h-7 w-7 p-0 bg-white/80 hover:bg-blue-100 text-blue-600 border-blue-300"
                                        onClick={() => {
                                          const updatedImages = images.map((img, i) => ({ ...img, isMain: i === idx }));
                                          setImages(updatedImages);
                                          field.onChange(image.url);
                                          form.setValue('imageUrl', image.url);
                                          toast({ title: "Ana resim güncellendi", description: "Seçilen resim ana resim olarak ayarlandı" });
                                        }}
                                      ><Star className="h-4 w-4" /></Button>
                                    )}
                                    <Button
                                      type="button"
                                      variant="outline"
                                      size="icon"
                                      className="h-7 w-7 p-0 bg-white/80 hover:bg-red-100 text-red-500 border-red-300"
                                      onClick={() => {
                                        const wasMain = image.isMain;
                                        const updatedImages = images.filter((_, i) => i !== idx);
                                        if (wasMain && updatedImages.length > 0) {
                                          updatedImages[0].isMain = true;
                                          field.onChange(updatedImages[0].url);
                                          form.setValue('imageUrl', updatedImages[0].url);
                                        } else if (updatedImages.length === 0) {
                                          field.onChange('');
                                          form.setValue('imageUrl', '');
                                        }
                                        setImages(updatedImages);
                                        toast({ title: "Resim silindi", description: "Seçilen resim silindi" });
                                      }}
                                    ><Trash className="h-4 w-4" /></Button>
                                  </div>
                                  {image.isMain && (
                                    <div className="absolute bottom-0 left-0 right-0 bg-blue-500 text-white text-xs font-semibold px-1.5 py-0.5 text-center rounded-b-xl">Ana</div>
                                  )}
                                </div>
                              ))}
                            </div>
                          )}
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Açıklama</FormLabel>
                        <FormControl>
                          <Textarea rows={4} className="bg-white/5 rounded-xl shadow-inner" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </TabsContent>
                <TabsContent value="features" className="space-y-4">
                  <FormField
                    control={form.control}
                    name="features"
                    render={() => (
                      <FormItem>
                        <FormLabel>Oda Özellikleri</FormLabel>
                        <div className="grid grid-cols-2 gap-3 mt-3">
                          {availableFeatures.map((feature) => (
                            <FormField
                              key={feature.id}
                              control={form.control}
                              name="features"
                              render={({ field }) => (
                                <FormItem key={feature.id} className="flex flex-row items-center space-x-3 space-y-0 bg-white/60 rounded-xl px-3 py-2 shadow-sm">
                                  <FormControl>
                                    <Checkbox
                                      checked={field.value?.includes(feature.id)}
                                      onCheckedChange={(checked) => {
                                        return checked
                                          ? field.onChange([...field.value, feature.id])
                                          : field.onChange(field.value?.filter((value) => value !== feature.id));
                                      }}
                                    />
                                  </FormControl>
                                  <FormLabel className="cursor-pointer">{feature.label}</FormLabel>
                                </FormItem>
                              )}
                            />
                          ))}
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </TabsContent>
                <TabsContent value="pricing" className="space-y-6">
                  <div className="grid grid-cols-3 gap-2 mb-4">
                    <Button type="button" variant={calendarMode === 'single' ? 'default' : 'outline'} onClick={() => setCalendarMode('single')} className="h-12 rounded-xl">{<CalendarDays className="h-4 w-4 mr-2" />}Tek Gün</Button>
                    <Button type="button" variant={calendarMode === 'range' ? 'default' : 'outline'} onClick={() => setCalendarMode('range')} className="h-12 rounded-xl">{<CalendarIcon className="h-4 w-4 mr-2" />}Tarih Aralığı</Button>
                    <Button type="button" variant={calendarMode === 'weekday' ? 'default' : 'outline'} onClick={() => setCalendarMode('weekday')} className="h-12 rounded-xl">{<Clock className="h-4 w-4 mr-2" />}Hafta Günü</Button>
                  </div>
                  {/* Tek gün fiyat */}
                  {calendarMode === 'single' && (
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <FormLabel>Tarih Seçin</FormLabel>
                          <Popover open={openSingleDatePicker} onOpenChange={setOpenSingleDatePicker}>
                            <PopoverTrigger asChild>
                              <Button variant="outline" className="w-full justify-start text-left font-normal h-12 mt-1 rounded-xl">
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {selectedDate ? (selectedDate.toLocaleDateString('tr-TR')) : (<span className="text-neutral-500">Tarih seçin</span>)}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0 rounded-xl shadow-lg" align="start">
                              <Calendar
                                mode="single"
                                selected={selectedDate}
                                onSelect={(date: Date | undefined) => { if (date) { setSelectedDate(date); setOpenSingleDatePicker(false); } }}
                                modifiers={{ highlighted: isDayHighlighted }}
                                modifiersStyles={{ highlighted: { backgroundColor: "rgba(32, 148, 243, 0.15)" } }}
                                components={{
                                  DayContent: (props: { date: Date }) => {
                                    const price = getPriceForDate(props.date);
                                    return (
                                      <div className="relative h-9 w-9 flex items-center justify-center">
                                        <div>{props.date.getDate()}</div>
                                        {price && (
                                          <div className="absolute bottom-0 left-0 right-0 text-[9px] leading-tight text-primary font-medium">{price} ₺</div>
                                        )}
                                      </div>
                                    );
                                  }
                                }}
                              />
                            </PopoverContent>
                          </Popover>
                        </div>
                        <div>
                          <FormLabel>Fiyat (₺)</FormLabel>
                          <Input type="number" min="0" value={selectedDatePrice} onChange={(e) => setSelectedDatePrice(Number(e.target.value))} className="h-12 mt-1 rounded-xl" />
                        </div>
                      </div>
                      <Button type="button" onClick={handleAddDailyPrice} disabled={!selectedDate || selectedDatePrice <= 0} className="h-12 w-full rounded-xl bg-gradient-to-r from-blue-400 to-blue-600 text-white font-bold shadow hover:scale-105 transition">Fiyat Ekle</Button>
                      {dailyPrices.length > 0 && (
                        <div className="p-4 bg-white rounded-xl shadow space-y-2 mt-2">
                          <h3 className="font-medium text-sm mb-3">Özel Günlük Fiyatlar</h3>
                          {dailyPrices.map((priceObj, index) => (
                            <div key={index} className="flex justify-between items-center py-2 border-b border-neutral-100 last:border-0">
                              <div>
                                <span className="text-sm font-medium">{priceObj.date.toLocaleDateString('tr-TR')}</span>
                                <span className="block text-xs text-neutral-500">{priceObj.price} ₺</span>
                              </div>
                              <Button variant="ghost" size="sm" onClick={() => handleDeleteDailyPrice(priceObj.date)} className="h-8 text-red-500 hover:bg-red-50 hover:text-red-600">Sil</Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                  {/* Tarih aralığı fiyat */}
                  {calendarMode === 'range' && (
                    <div className="space-y-4">
                      <div>
                        <FormLabel>Tarih Aralığı</FormLabel>
                        <Popover open={openRangeDatePicker} onOpenChange={setOpenRangeDatePicker}>
                          <PopoverTrigger asChild>
                            <Button variant="outline" className="w-full justify-start text-left font-normal h-12 mt-1 rounded-xl">
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {dateRange.startDate && dateRange.endDate
                                ? `${dateRange.startDate.toLocaleDateString('tr-TR')} - ${dateRange.endDate.toLocaleDateString('tr-TR')}`
                                : (<span className="text-neutral-500">Tarih aralığı seçin</span>)
                              }
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0 rounded-xl shadow-lg" align="start">
                            <Calendar
                              mode="range"
                              selected={{ from: dateRange.startDate, to: dateRange.endDate }}
                              onSelect={(range: { from: Date, to: Date } | undefined) => {
                                if (range?.from && range?.to) {
                                  setDateRange({ startDate: range.from, endDate: range.to });
                                  setOpenRangeDatePicker(false);
                                }
                              }}
                              modifiers={{ highlighted: isDayHighlighted }}
                              modifiersStyles={{ highlighted: { backgroundColor: "rgba(32, 148, 243, 0.1)" } }}
                              components={{
                                DayContent: (props: { date: Date }) => {
                                  const price = getPriceForDate(props.date);
                                  return (
                                    <div className="relative h-9 w-9 flex items-center justify-center">
                                      <div>{props.date.getDate()}</div>
                                      {price && (
                                        <div className="absolute bottom-0 left-0 right-0 text-[9px] leading-tight text-primary font-medium">{price} ₺</div>
                                      )}
                                    </div>
                                  );
                                }
                              }}
                            />
                          </PopoverContent>
                        </Popover>
                      </div>
                      <div>
                        <FormLabel>Günlük Fiyat (₺)</FormLabel>
                        <Input type="number" min="0" value={rangePriceValue} onChange={(e) => setRangePriceValue(Number(e.target.value))} className="h-12 mt-1 rounded-xl" />
                      </div>
                      <Button type="button" onClick={handleAddRangePrice} disabled={!dateRange.startDate || !dateRange.endDate || rangePriceValue <= 0} className="h-12 w-full rounded-xl bg-gradient-to-r from-blue-400 to-blue-600 text-white font-bold shadow hover:scale-105 transition">Fiyat Ekle</Button>
                    </div>
                  )}
                  {/* Hafta günü fiyat */}
                  {calendarMode === 'weekday' && (
                    <div className="space-y-4">
                      <div className="grid grid-cols-2 gap-3">
                        <div>
                          <FormLabel>Gün</FormLabel>
                          <Select value={selectedWeekday.toString()} onValueChange={v => setSelectedWeekday(Number(v))}>
                            <SelectTrigger className="h-12 mt-1 rounded-xl">
                              <SelectValue placeholder="Gün seçin" />
                            </SelectTrigger>
                            <SelectContent>
                              {weekdays.map((day) => (
                                <SelectItem key={day.index} value={day.index.toString()}>{day.name}</SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <FormLabel>Fiyat (₺)</FormLabel>
                          <Input type="number" min="0" value={selectedWeekdayPrice} onChange={(e) => setSelectedWeekdayPrice(Number(e.target.value))} className="h-12 mt-1 rounded-xl" />
                        </div>
                      </div>
                      <Button type="button" onClick={handleAddWeekdayPrice} disabled={selectedWeekdayPrice <= 0} className="w-full h-12 rounded-xl bg-gradient-to-r from-blue-400 to-blue-600 text-white font-bold shadow hover:scale-105 transition">Hafta Günü Fiyatı Ekle</Button>
                      {weekdayPrices.length > 0 && (
                        <div className="p-4 bg-white rounded-xl shadow space-y-2">
                          <h3 className="font-medium text-sm mb-3">Hafta Günleri Fiyatları</h3>
                          {weekdayPrices.map((priceObj, index) => (
                            <div key={index} className="flex justify-between items-center py-2 border-b border-neutral-100 last:border-0">
                              <div>
                                <span className="text-sm font-medium">{weekdays.find(w => w.index === priceObj.dayIndex)?.name}</span>
                                <span className="block text-xs text-neutral-500">{priceObj.price} ₺</span>
                              </div>
                              <Button variant="ghost" size="sm" onClick={() => handleDeleteWeekdayPrice(priceObj.dayIndex)} className="h-8 text-red-500 hover:bg-red-50 hover:text-red-600">Sil</Button>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  )}
                </TabsContent>
              </Tabs>
              <div className="fixed bottom-0 left-0 right-0 bg-white p-4 shadow-[0_-2px_10px_rgba(0,0,0,0.1)] flex gap-2 z-20">
                <Button type="button" variant="outline" className="flex-1 h-12 rounded-xl" onClick={() => navigate("/admin/rooms")}>İptal</Button>
                <Button type="button" className="flex-1 h-12 rounded-xl bg-gradient-to-r from-[#2094f3] to-[#38b6ff] hover:from-[#1084e3] hover:to-[#28a6ef] text-white font-bold shadow-lg" disabled={updateRoomMutation.isPending || isUploading} onClick={() => form.handleSubmit(onSubmit)()}>
                  {updateRoomMutation.isPending ? (<Loader2 className="mr-2 h-5 w-5 animate-spin" />) : (<Save className="mr-2 h-5 w-5" />)}Kaydet
                </Button>
              </div>
            </form>
          </Form>
        )}
      </div>
    </div>
  );
}
