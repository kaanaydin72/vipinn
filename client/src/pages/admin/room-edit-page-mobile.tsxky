import { useState, useEffect } from "react";
import { useRoute, useLocation } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { Room, Hotel, insertRoomSchema } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Loader2,
  ArrowLeft,
  CalendarDays,
  Calendar as CalendarIcon,
  Clock,
  Save,
  Upload,
  Star,
  Trash
} from "lucide-react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";

// Oda özellikleri
const availableFeatures = [
  { id: "kingYatak", label: "King Yatak" },
  { id: "wifi", label: "Ücretsiz Wi-Fi" },
  { id: "tv", label: "Akıllı TV" },
  { id: "klima", label: "Klima" },
  { id: "banyo", label: "Özel Banyo" },
  { id: "minibar", label: "Mini Bar" },
  { id: "denizManzara", label: "Deniz Manzarası" },
  { id: "jakuzi", label: "Jakuzi" },
  { id: "oturmaAlani", label: "Oturma Alanı" },
  { id: "teras", label: "Özel Teras" },
  { id: "ikiYatakOdasi", label: "2 Yatak Odası" },
  { id: "ikiBanyo", label: "2 Banyo" },
];

// Oda tipleri
const roomTypes = [
  { id: "standart", label: "Standart Oda" },
  { id: "deluxe", label: "Deluxe Oda" },
  { id: "suit", label: "Suit Oda" },
  { id: "aile", label: "Aile Odası" },
];

// Hafta günleri
const weekdays = [
  { index: 0, name: "Pazar" },
  { index: 1, name: "Pazartesi" },
  { index: 2, name: "Salı" },
  { index: 3, name: "Çarşamba" },
  { index: 4, name: "Perşembe" },
  { index: 5, name: "Cuma" },
  { index: 6, name: "Cumartesi" },
];

// Form validation şeması
const roomFormSchema = insertRoomSchema.extend({
  features: z.array(z.string()).min(1, {
    message: "En az bir özellik seçmelisiniz",
  }),
  hotelId: z.coerce.number(),
  roomCount: z.coerce.number().min(0, "Oda sayısı 0 veya daha fazla olmalı"),
});

type RoomFormValues = z.infer<typeof roomFormSchema>;

export default function RoomEditPageMobile() {
  const [match, params] = useRoute("/admin/rooms/edit/:id");
  const [location, navigate] = useLocation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("details");

  // Fiyatlandırma
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [selectedDatePrice, setSelectedDatePrice] = useState<number>(0);
  const [dailyPrices, setDailyPrices] = useState<Array<{ date: Date, price: number }>>([]);
  const [selectedWeekday, setSelectedWeekday] = useState<number>(0);
  const [selectedWeekdayPrice, setSelectedWeekdayPrice] = useState<number>(0);
  const [weekdayPrices, setWeekdayPrices] = useState<Array<{ dayIndex: number, price: number }>>([]);
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  const [dateRange, setDateRange] = useState<{ startDate: Date, endDate: Date }>({
    startDate: today,
    endDate: tomorrow,
  });

  // Popover states
  const [openSingleDatePicker, setOpenSingleDatePicker] = useState(false);
  const [openRangeDatePicker, setOpenRangeDatePicker] = useState(false);
  const [isUploading, setIsUploading] = useState(false);

  // Resim state
  const [images, setImages] = useState<Array<{ url: string, filename: string, isMain: boolean }>>([]);

  type CalendarMode = 'single' | 'range' | 'weekday';
  const [calendarMode, setCalendarMode] = useState<CalendarMode>('single');
  const [rangePriceValue, setRangePriceValue] = useState<number>(0);

  // Oda ID
  const roomId = params?.id ? parseInt(params.id) : 0;

  // Oda verisi çek
  const { data: room, isLoading: isLoadingRoom } = useQuery<Room>({
    queryKey: ['/api/rooms', roomId],
    queryFn: async () => {
      const response = await apiRequest("GET", `/api/rooms/${roomId}`);
      return response.json();
    },
    enabled: !!roomId,
  });

  // Otel listesi
  const { data: hotels = [], isLoading: isLoadingHotels } = useQuery<Hotel[]>({
    queryKey: ['/api/hotels'],
  });

  const isLoading = isLoadingRoom || isLoadingHotels;

  // İlk yüklemede eski room'u parse et
  useEffect(() => {
    if (room && room.dailyPrices) {
      try {
        const parsedDailyPrices = JSON.parse(room.dailyPrices);
        setDailyPrices(parsedDailyPrices.map((item: any) => ({
          date: new Date(item.date),
          price: item.price
        })));
      } catch (e) { }
    }
    if (room && room.weekdayPrices) {
      try {
        const parsedWeekdayPrices = JSON.parse(room.weekdayPrices);
        setWeekdayPrices(parsedWeekdayPrices);
      } catch (e) { }
    }
    // Eski sistemden kalan resimler
    if (room && room.images) {
      try {
        const parsedImages = JSON.parse(room.images);
        if (parsedImages.length > 0 && !parsedImages.some((img: any) => img.isMain)) {
          parsedImages[0].isMain = true;
        }
        setImages(parsedImages);
      } catch (e) {
        if (room.imageUrl) {
          setImages([{
            url: room.imageUrl,
            filename: 'main_image.jpg',
            isMain: true
          }]);
        }
      }
    } else if (room && room.imageUrl) {
      setImages([{
        url: room.imageUrl,
        filename: 'main_image.jpg',
        isMain: true
      }]);
    }
  }, [room]);

  // Form setup
  const form = useForm<RoomFormValues>({
    resolver: zodResolver(roomFormSchema),
    defaultValues: {
      name: "",
      description: "",
      hotelId: 1,
      imageUrl: "",
      roomCount: 0,
      capacity: 2,
      type: "Standart Oda",
      features: [],
    },
  });

  // Room geldiğinde formu güncelle
  useEffect(() => {
    if (room) {
      form.reset({
        name: room.name,
        description: room.description,
        hotelId: room.hotelId,
        imageUrl: room.imageUrl,
        roomCount: typeof room.roomCount === "number" ? room.roomCount : 0,
        capacity: room.capacity ?? 2,
        type: room.type || "Standart Oda",
        features: Array.isArray(room.features) ? room.features : [],
      });
    }
  }, [room, form]);

  // Room update mutation
  const updateRoomMutation = useMutation({
    mutationFn: async (roomData: any) => {
      if (typeof roomData.dailyPrices === 'object') {
        roomData.dailyPrices = JSON.stringify(roomData.dailyPrices);
      }
      if (typeof roomData.weekdayPrices === 'object') {
        roomData.weekdayPrices = JSON.stringify(roomData.weekdayPrices);
      }
      if (!roomId) throw new Error("Oda ID bulunamadı");

      try {
        toast({ title: "İşlem devam ediyor", description: "Oda bilgileri güncelleniyor..." });
        const response = await apiRequest("PUT", `/api/rooms/${roomId}`, roomData);
        if (!response.ok) throw new Error(await response.text());
        return await response.json();
      } catch (error: any) {
        throw new Error(error.message || "Bilinmeyen bir hata oluştu");
      }
    },
    onSuccess: () => {
      toast({ title: "Oda güncellendi", description: "Oda başarıyla güncellendi." });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms'] });
      queryClient.invalidateQueries({ queryKey: ['/api/rooms', roomId] });
      navigate("/admin/rooms");
    },
    onError: (error: Error) => {
      toast({
        title: "Hata",
        description: `Oda güncellenirken hata: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Submit handler
  const onSubmit = (formData: RoomFormValues) => {
    if (!formData.hotelId) {
      toast({ title: "Validasyon Hatası", description: "Lütfen bir otel seçin", variant: "destructive" }); return;
    }
    if (!formData.name) {
      toast({ title: "Validasyon Hatası", description: "Lütfen oda adını girin", variant: "destructive" }); return;
    }
    if (dailyPrices.length === 0 && weekdayPrices.length === 0) {
      toast({
        title: "Fiyatlandırma Uyarısı",
        description: "Takvim bazlı fiyatlandırma yapmadınız. Rezervasyon için fiyat belirtmelisiniz.",
        variant: "warning",
      });
    }
    let numericPrice = 0;
    const capacity = typeof formData.capacity === 'string' ? parseInt(formData.capacity) : formData.capacity;
    const imagesData = images.map(img => ({
      url: img.url,
      filename: img.filename,
      isMain: img.isMain
    }));
    const mainImage = images.find(img => img.isMain);
    if (mainImage) {
      formData.imageUrl = mainImage.url;
    }

    const updatedData = {
      ...formData,
      price: numericPrice,
      capacity: capacity,
      dailyPrices: JSON.stringify(dailyPrices),
      weekdayPrices: JSON.stringify(weekdayPrices),
      images: JSON.stringify(imagesData)
    };
    updateRoomMutation.mutate(updatedData);
  };

  // --- Fiyatlandırma fonksiyonları ---
  const handleAddDailyPrice = () => {
    if (!selectedDate || selectedDatePrice <= 0) return;
    const existingIndex = dailyPrices.findIndex(p =>
      p.date.toDateString() === selectedDate.toDateString()
    );
    if (existingIndex >= 0) {
      const updatedPrices = [...dailyPrices];
      updatedPrices[existingIndex] = { date: selectedDate, price: selectedDatePrice };
      setDailyPrices(updatedPrices);
    } else {
      setDailyPrices([...dailyPrices, { date: selectedDate, price: selectedDatePrice }]);
    }
    toast({ title: "Fiyat eklendi", description: `${selectedDate.toLocaleDateString('tr-TR')} tarihi için fiyat: ${selectedDatePrice} ₺` });
    setOpenSingleDatePicker(false);
  };
  const handleAddRangePrice = () => {
    if (!dateRange.startDate || !dateRange.endDate || rangePriceValue <= 0) return;
    const start = new Date(dateRange.startDate);
    const end = new Date(dateRange.endDate);
    const newPrices: Array<{ date: Date, price: number }> = [];
    const currentDate = new Date(start);
    while (currentDate <= end) {
      newPrices.push({ date: new Date(currentDate), price: rangePriceValue });
      currentDate.setDate(currentDate.getDate() + 1);
    }
    const updatedPrices = [...dailyPrices];
    newPrices.forEach(newPrice => {
      const existingIndex = updatedPrices.findIndex(p =>
        p.date.toDateString() === newPrice.date.toDateString()
      );
      if (existingIndex >= 0) {
        updatedPrices[existingIndex] = newPrice;
      } else {
        updatedPrices.push(newPrice);
      }
    });
    setDailyPrices(updatedPrices);
    toast({
      title: "Fiyatlar eklendi",
      description: `${start.toLocaleDateString('tr-TR')} - ${end.toLocaleDateString('tr-TR')} tarihleri için fiyat: ${rangePriceValue} ₺`
    });
    setOpenRangeDatePicker(false);
  };
  const handleAddWeekdayPrice = () => {
    if (selectedWeekdayPrice <= 0) return;
    const existingIndex = weekdayPrices.findIndex(p => p.dayIndex === selectedWeekday);
    if (existingIndex >= 0) {
      const updatedPrices = [...weekdayPrices];
      updatedPrices[existingIndex] = { dayIndex: selectedWeekday, price: selectedWeekdayPrice };
      setWeekdayPrices(updatedPrices);
    } else {
      setWeekdayPrices([...weekdayPrices, { dayIndex: selectedWeekday, price: selectedWeekdayPrice }]);
    }
    toast({
      title: "Gün fiyatı eklendi",
      description: `${weekdays.find(w => w.index === selectedWeekday)?.name} günleri için fiyat: ${selectedWeekdayPrice} ₺`
    });
  };
  const isDayHighlighted = (date: Date) => dailyPrices.some(p => p.date.toDateString() === date.toDateString());
  const getPriceForDate = (date: Date) => {
    const priceObj = dailyPrices.find(p => p.date.toDateString() === date.toDateString());
    return priceObj ? priceObj.price : null;
  };
  const handleDeleteDailyPrice = (dateToDelete: Date) => {
    setDailyPrices(dailyPrices.filter(p => p.date.toDateString() !== dateToDelete.toDateString()));
    toast({
      title: "Fiyat silindi",
      description: `${dateToDelete.toLocaleDateString('tr-TR')} tarihi için fiyat kaldırıldı.`
    });
  };
  const handleDeleteWeekdayPrice = (dayIndex: number) => {
    setWeekdayPrices(weekdayPrices.filter(p => p.dayIndex !== dayIndex));
    toast({
      title: "Gün fiyatı silindi",
      description: `${weekdays.find(w => w.index === dayIndex)?.name} günü için fiyat kaldırıldı.`
    });
  };

  // --- Eğer oda yoksa ---
  if (!isLoading && !room) {
    return (
      <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
        <div className="bg-gradient-to-r from-[#2094f3] to-[#38b6ff] text-white shadow-md">
          <div className="flex items-center px-4 h-14">
            <Button
              variant="ghost"
              size="icon"
              className="text-white"
              onClick={() => navigate("/admin/rooms")}
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="flex-1 text-center font-semibold text-lg">Oda Bulunamadı</h1>
          </div>
        </div>
        <div className="p-4 flex flex-col items-center justify-center h-[80vh]">
          <p className="text-center text-neutral-500 mb-4">
            Düzenlemek istediğiniz oda bulunamadı.
          </p>
          <Button onClick={() => navigate("/admin/rooms")}>
            Oda Listesine Dön
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="sticky top-0 z-10">
        <div className="bg-gradient-to-r from-[#2094f3] to-[#38b6ff] text-white shadow-md">
          <div className="flex items-center px-4 h-14">
            <Button
              variant="ghost"
              size="icon"
              className="text-white"
              onClick={() => navigate("/admin/rooms")}
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <h1 className="flex-1 text-center font-semibold text-lg">Odayı Düzenle</h1>
          </div>
        </div>
      </div>

      <div className="p-4 pb-32">
        {isLoading ? (
          <div className="flex justify-center items-center h-[60vh]">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <Tabs defaultValue="details" className="w-full" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid grid-cols-3 mb-6">
                  <TabsTrigger value="details">Detaylar</TabsTrigger>
                  <TabsTrigger value="features">Özellikler</TabsTrigger>
                  <TabsTrigger value="pricing">Fiyatlandırma</TabsTrigger>
                </TabsList>

                {/* --- Detaylar Tabı --- */}
                <TabsContent value="details" className="space-y-4">
                  <FormField
                    control={form.control}
                    name="hotelId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Otel</FormLabel>
                        <Select
                          onValueChange={(value) => field.onChange(parseInt(value))}
                          defaultValue={field.value ? field.value.toString() : undefined}
                          value={field.value.toString()}
                        >
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5">
                              <SelectValue placeholder="Otel seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {hotels.map((hotel) => (
                              <SelectItem key={hotel.id} value={hotel.id.toString()}>
                                {hotel.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Adı</FormLabel>
                        <FormControl>
                          <Input className="h-12 bg-white/5" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* --- Animasyonlu Oda Sayısı (roomCount) Alanı --- */}
                  <FormField
                    control={form.control}
                    name="roomCount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Sayısı</FormLabel>
                        <div className="relative flex items-center">
                          <Input
                            type="number"
                            min={0}
                            max={100}
                            className="h-12 bg-white/5"
                            {...field}
                          />
                          {(field.value === 0 || field.value <= 5) && (
                            <span
                              className={`
                                absolute right-2 text-xs font-bold
                                ${field.value === 0
                                  ? "text-red-500 animate-pulse"
                                  : "text-red-500 animate-bounce"}
                              `}
                              style={{
                                animationDuration: field.value === 0 ? "1s" : "2s",
                                top: "50%",
                                transform: "translateY(-50%)"
                              }}
                            >
                              {field.value === 0
                                ? "Oda tükendi!"
                                : `Son ${field.value} oda!`}
                            </span>
                          )}
                        </div>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* --- Oda tipi, resim, açıklama alanları (değişmedi) --- */}
                  <FormField
                    control={form.control}
                    name="type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Oda Tipi</FormLabel>
                        <Select
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          value={field.value}
                        >
                          <FormControl>
                            <SelectTrigger className="h-12 bg-white/5">
                              <SelectValue placeholder="Oda tipi seçin" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {roomTypes.map((type) => (
                              <SelectItem key={type.id} value={type.label}>
                                {type.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {/* --- Diğer alanlar: imageUrl, açıklama vs. buradan aşağısı değişmedi --- */}
                  {/* (Senin önceki kodunla aynı şekilde devam ediyor.) */}
                  <FormField
                    control={form.control}
                    name="imageUrl"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Görsel URL</FormLabel>
                        {/* ... burası değişmedi ... */}
                        {/* Aynı image upload ve gösterme kodları burada devam ediyor ... */}
                        {/* ... */}
                        {/* ... */}
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Açıklama</FormLabel>
                        <FormControl>
                          <Textarea rows={4} className="bg-white/5" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </TabsContent>
                {/* Diğer TABS (features, pricing) -- kodun değişmeyen kısımları */}
                {/* ... kodun devamı senin önceki ile aynı ... */}
              </Tabs>

              <div className="fixed bottom-0 left-0 right-0 bg-white dark:bg-neutral-800 p-4 shadow-[0_-2px_10px_rgba(0,0,0,0.1)] flex gap-2 z-20">
                <Button
                  type="button"
                  variant="outline"
                  className="flex-1 h-12"
                  onClick={() => navigate("/admin/rooms")}
                >
                  İptal
                </Button>
                <Button
                  type="button"
                  className="flex-1 h-12 bg-gradient-to-r from-[#2094f3] to-[#38b6ff] hover:from-[#1084e3] hover:to-[#28a6ef]"
                  disabled={updateRoomMutation.isPending || isUploading}
                  onClick={() => form.handleSubmit(onSubmit)()}
                >
                  {updateRoomMutation.isPending ? (
                    <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  ) : (
                    <Save className="mr-2 h-5 w-5" />
                  )}
                  Kaydet
                </Button>
              </div>
            </form>
          </Form>
        )}
      </div>
    </div>
  );
}
